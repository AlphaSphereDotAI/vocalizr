name: Docker Image
on:
  workflow_call:
    inputs:
      is_test:
        type: boolean
        required: true
        description: Test Mode
      registry:
        type: string
        required: true
        description: Registry
      install_source:
        type: string
        required: true
        description: Source to install from (e.g., PyPI Package or Git source)
permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write
jobs:
  check_dockerfile:
    name: Validate Dockerfile
    runs-on: ubuntu-latest
    if: ${{ inputs.is_test }}
    environment:
      name: code_quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Log in to ${{ inputs.registry }} Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ${{ inputs.registry }}
          username: mh0386
          password: ${{ inputs.registry == 'ghcr.io' && secrets.GH_TOKEN || inputs.registry == 'docker.io' && secrets.TOKEN_KEY_DOCKER }}
      - name: Validate build configuration
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          call: check
      - name: Job Summary (Success)
        if: ${{ success() }}
        run: |
          echo "# Dockerfile Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No issues found :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
      - name: Job Summary (Failure)
        if: ${{ failure() }}
        run: |
          echo "# Dockerfile Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check failed :x:" >> $GITHUB_STEP_SUMMARY
  build_image:
    name: Build and push Docker image to ${{ inputs.registry }}
    needs: check_dockerfile
    if: ${{ always() && !cancelled() }}
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.TAG }}
    environment:
      name: docker_image
      url: ${{inputs.registry}}/${{github.repository}}
    steps:
      - name: Free Disk Space
        if: github.event_name != 'pull_request'
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Get Python version from pyproject.toml
        id: get_python_version
        uses: mikefarah/yq@0ecdce24e83f0fa127940334be98c86b07b0c488 # v4.48.1
        with:
          cmd: yq -roy '.project.requires-python' pyproject.toml
      - name: Log in to ${{ inputs.registry }} Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ${{ inputs.registry }}
          username: mh0386
          password: ${{ inputs.registry == 'ghcr.io' && secrets.GH_TOKEN || inputs.registry == 'docker.io' && secrets.TOKEN_KEY_DOCKER }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: ${{ inputs.registry }}/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
            type=ref,event=pr,prefix={{sha}}-pr-
            type=ref,event=tag
            type=ref,event=branch
      - name: Build and Push to ${{ inputs.registry }}
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        id: push
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            INSTALL_SOURCE=${{ inputs.install_source }}
            PYTHON_VERSION=${{ steps.get_python_version.outputs.result }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3
        if: ${{ inputs.is_test == false }}
        with:
          subject-name: ${{ inputs.registry == 'docker.io' && 'index.docker.io' || inputs.registry }}/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      - name: Update Docker Hub Description
        if: ${{ inputs.registry == 'docker.io' }}
        uses: peter-evans/dockerhub-description@1b9a80c056b620d92cedb9d9b5a223409c68ddfa # v5.0.0
        with:
          username: mh0386
          password: ${{ secrets.TOKEN_KEY_DOCKER }}
          repository: ${{ github.repository }}
          short-description: ${{ github.event.repository.description }}
          enable-url-completion: true
      - name: Export tag for Testing and Scanning
        id: tag
        run: echo "TAG=$(echo "${{ steps.meta.outputs.tags }}" | tail -n 1)" >> $GITHUB_OUTPUT
  docker_scout:
    name: Docker Scout (${{ matrix.commands }})
    needs: build_image
    if: ${{ always() && !cancelled() }}
    runs-on: ubuntu-latest
    environment:
      name: docker_image
    strategy:
      fail-fast: false
      matrix:
        commands:
          - quickview
          - cves
          - recommendations
    steps:
      - name: Log in to ${{ inputs.registry }} Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ${{ inputs.registry }}
          username: mh0386
          password: ${{ inputs.registry == 'ghcr.io' && secrets.GH_TOKEN || inputs.registry == 'docker.io' && secrets.TOKEN_KEY_DOCKER }}
      - name: Docker Scout
        uses: docker/scout-action@f8c776824083494ab0d56b8105ba2ca85c86e4de # v1
        continue-on-error: true
        with:
          command: ${{ matrix.commands }}
          dockerhub-user: mh0386
          dockerhub-password: ${{ secrets.TOKEN_KEY_DOCKER }}
          image: ${{ needs.build_image.outputs.image_tag }}
          github-token: ${{ secrets.GH_TOKEN }}
  api_test:
    name: API Test
    needs: build_image
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() && inputs.is_test }}
    environment:
      name: api_test
    services:
      vocalizr:
        image: ${{ needs.build_image.outputs.image_tag }}
        ports:
          - 7860:7860
        options: >-
          --health-cmd "curl -o /dev/null -f -s -w 'Status: %{http_code}, Time: %{time_total}s' http://localhost:7860/" --health-interval 10s
          --health-timeout 10s --health-start-period 20s --health-retries 15
    steps:
      - name: Echo URL
        run: echo "Vocalizr available on localhost:${{ job.services.vocalizr.ports['7860'] }}"
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Install uv
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          activate-environment: true
      - name: Install deps
        run: uv sync --only-dev
      - name: Test
        env:
          VOCALIZR_URL: http://localhost:${{ job.services.vocalizr.ports['7860'] }}/
          MERGIFY_TOKEN: ${{ secrets.MERGIFY_TOKEN }}
        uses: pavelzw/pytest-action@510c5e90c360a185039bea56ce8b3e7e51a16507 # v2
        with:
          click-to-expand: false
          custom-arguments: "tests/test_app.py::test_app -p no:warnings"
  clean:
    name: Cleaning GHCR
    needs:
      - api_test
      - docker_scout
    if: ${{ always() && !cancelled() && inputs.registry == 'ghcr.io' }}
    runs-on: ubuntu-latest
    environment:
      name: docker_image
    steps:
      - name: GHCR Cleaning
        uses: snok/container-retention-policy@3b0972b2276b171b212f8c4efbca59ebba26eceb # v3.0.1
        with:
          account: ${{ github.repository_owner }}
          token: ${{ secrets.GH_TOKEN }}
          image-names: ${{ github.event.repository.name }}
          image-tags: "!latest !*.*.*"
          cut-off: 1s
